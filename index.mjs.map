{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport MAX_SAFE_INTEGER from '@stdlib/constants-float32-max-safe-integer';\nimport PINF from '@stdlib/constants-float32-pinf';\nimport isIntegerf from '@stdlib/math-base-assert-is-integerf';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport isOddf from '@stdlib/math-base-assert-is-oddf';\nimport floorf from '@stdlib/math-base-special-floorf';\nimport gcdf from '@stdlib/math-base-special-gcdf';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the binomial coefficient of two integers as a single-precision floating-point number.\n*\n* @param {integer} n - input value\n* @param {integer} k - second input value\n* @returns {integer} function value\n*\n* @example\n* var v = binomcoeff( 8, 2 );\n* // returns 28\n*\n* @example\n* var v = binomcoeff( 0, 0 );\n* // returns 1\n*\n* @example\n* var v = binomcoeff( -4, 2 );\n* // returns 10\n*\n* @example\n* var v = binomcoeff( NaN, 3 );\n* // returns NaN\n*\n* @example\n* var v = binomcoeff( 5, NaN );\n* // returns NaN\n*\n* @example\n* var v = binomcoeff( NaN, NaN );\n* // returns NaN\n*/\nfunction binomcoeff( n, k ) {\n\tvar res;\n\tvar sgn;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar g;\n\tvar s;\n\tif ( isnanf( n ) || isnanf( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( !isIntegerf( n ) || !isIntegerf( k ) ) {\n\t\treturn NaN;\n\t}\n\tif ( k < 0 ) {\n\t\treturn 0.0;\n\t}\n\tsgn = float64ToFloat32( 1.0 );\n\tif ( n < 0 ) {\n\t\tn = -n + k - 1;\n\t\tif ( isOddf( k ) ) {\n\t\t\tsgn = float64ToFloat32( sgn * -1.0 );\n\t\t}\n\t}\n\tif ( k > n ) {\n\t\treturn 0.0;\n\t}\n\tif ( k === 0 || k === n ) {\n\t\treturn sgn;\n\t}\n\tif ( k === 1 || k === n - 1 ) {\n\t\treturn float64ToFloat32( sgn * n );\n\t}\n\t// Minimize the number of computed terms by leveraging symmetry:\n\tif ( n - k < k ) {\n\t\tk = n - k;\n\t}\n\ts = floorf( MAX_SAFE_INTEGER / n );\n\n\t// Use a standard algorithm for computing the binomial coefficient (e.g., see Knuth's \"The Art of Computer Programming, 3rd Edition, Volume 2: Seminumerical Algorithms\")...\n\tres = float64ToFloat32( 1.0 );\n\tfor ( d = 1; d <= k; d++ ) {\n\t\t// Check for potential overflow...\n\t\tif ( res > s ) {\n\t\t\tbreak;\n\t\t}\n\t\tres = float64ToFloat32( res * n );\n\t\tres = float64ToFloat32( res / d );\n\t\tn -= 1;\n\t}\n\t// If we did not early exit from the previous loop, the answer is exact, and we can simply return...\n\tif ( d > k ) {\n\t\treturn float64ToFloat32( sgn * res );\n\t}\n\t/*\n\t* Let `N` equal the provided `n`.\n\t*\n\t* We want to calculate C(N,k), and, at this point, we have calculated\n\t*\n\t*   res = C(N,n) = C(N,N-n) = C(N,d-1)\n\t*\n\t* where `N-n = d-1` and, hence, `n = N - d + 1`.\n\t*\n\t* Given the following identity,\n\t*\n\t*   C(N,k) = C(N,d-1) * C(N-d+1,k-d+1) / C(k,k-d+1)\n\t*          = C(N,d-1) * C(n,k-d+1) / C(k,k-d+1)\n\t*\n\t* we can leverage recursion to perform argument reduction.\n\t*/\n\tb = binomcoeff( n, k-d+1 );\n\tif ( b === PINF ) {\n\t\treturn float64ToFloat32( sgn * float64ToFloat32( b ) );\n\t}\n\tc = binomcoeff( k, k-d+1 );\n\n\t/*\n\t* At this point, the result should be `res*b/c`.\n\t*\n\t* To help guard against overflow and precision loss, we calculate the greatest common divisor (gcdf). In this case, we pick `b`, as `b` should be less than `res` in most (if not all) cases.\n\t*/\n\tg = gcdf( b, c );\n\tb = float64ToFloat32( b / g );\n\tc = float64ToFloat32( c / g );\n\tres = float64ToFloat32( res / c );\n\treturn float64ToFloat32( sgn * res * b );\n}\n\n\n// EXPORTS //\n\nexport default binomcoeff;\n"],"names":["binomcoeff","n","k","res","sgn","b","c","d","g","s","isnanf","NaN","isIntegerf","float64ToFloat32","isOddf","floorf","MAX_SAFE_INTEGER","PINF","gcdf"],"mappings":";;0xBAiEA,SAASA,EAAYC,EAAGC,GACvB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAKC,EAAQT,IAAOS,EAAQR,GAC3B,OAAOS,IAER,IAAMC,EAAYX,KAAQW,EAAYV,GACrC,OAAOS,IAER,GAAKT,EAAI,EACR,OAAO,EASR,GAPAE,EAAMS,EAAkB,GACnBZ,EAAI,IACRA,GAAKA,EAAIC,EAAI,EACRY,EAAQZ,KACZE,EAAMS,GAAyB,EAAPT,KAGrBF,EAAID,EACR,OAAO,EAER,GAAW,IAANC,GAAWA,IAAMD,EACrB,OAAOG,EAER,GAAW,IAANF,GAAWA,IAAMD,EAAI,EACzB,OAAOY,EAAkBT,EAAMH,GAUhC,IAPKA,EAAIC,EAAIA,IACZA,EAAID,EAAIC,GAETO,EAAIM,EAAQC,EAAmBf,GAG/BE,EAAMU,EAAkB,GAClBN,EAAI,EAAGA,GAAKL,KAEZC,EAAMM,GAFSF,IAKpBJ,EAAMU,EAAkBV,EAAMF,GAC9BE,EAAMU,EAAkBV,EAAMI,GAC9BN,GAAK,EAGN,OAAKM,EAAIL,EACDW,EAAkBT,EAAMD,IAkBhCE,EAAIL,EAAYC,EAAGC,EAAEK,EAAE,MACZU,EACHJ,EAAkBT,EAAMS,EAAkBR,KAElDC,EAAIN,EAAYE,EAAGA,EAAEK,EAAE,GAOvBC,EAAIU,EAAMb,EAAGC,GACbD,EAAIQ,EAAkBR,EAAIG,GAC1BF,EAAIO,EAAkBP,EAAIE,GAC1BL,EAAMU,EAAkBV,EAAMG,GACvBO,EAAkBT,EAAMD,EAAME,GACtC"}